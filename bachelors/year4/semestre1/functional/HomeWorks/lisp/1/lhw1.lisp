(defconstant inf 1000000000)
(defun min-way (n m matr)
    (setf dp (make-array (list n m)))
    (dotimes (i n dp)
        (dotimes (j m)
            (setf up (if (> i 0) (aref dp (1- i) j) inf))
            (setf left (if (> j 0) (aref dp i (1- j)) inf))
            (setf diag (if (and (> i 0) (> j 0)) (aref dp (1- i) (1- j)) inf))
            (if (and (= i 0) (= j 0))
                (setf (aref dp i j) (aref matr i j))
                (setf (aref dp i j) (+ (min up left diag) (aref matr i j)))
            )
        )
    )
)

(defun restore-way (n m matr dp)
    (do    (    (res '())
            (i (1- n))
            (j (1- m))
        )
        ((and (= i 0) (= j 0)) (concatenate 'string res))
        (progn
            (setf prev (- (aref dp i j) (aref matr i j)))
            (if (and (> i 0) (= prev (aref dp (1- i) j))) (progn (decf i) (push #\D res))
                (if (and (> j 0) (= prev (aref dp i (1- j)))) (progn (decf j) (push #\R res))
                    (progn (decf i) (decf j) (push #\C res))
                )
            )
        )
    )
)

(setf n 4)
(setf m 5)
(setf matr (make-array (list n m) :initial-contents
    '((1 2 5 3 2)
    (0 0 7 5 4)
    (1 2 2 3 1)
    (6 7 3 2 0))))
(setf dp (min-way n m matr))
(setf way (restore-way n m matr dp))
(print way)