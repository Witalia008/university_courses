(defconstant moves '((1 0) (0 1) (-1 0) (0 -1)))
(defun correct(i j n m)
    (and (and (>= i 0) (>= j 0)) (and (< i n) (< j m)))
)
(defun dfs (i j n m matr)
    (setf (aref matr i j) 0)
    (dolist (x moves)
        (progn
            (setf tox (+ (car x) i))
            (setf toy (+ (cadr x) j))
            (if (and (correct tox toy n m) (= (aref matr tox toy) 1))
                (dfs tox toy n m matr))
        )
    )
)

(defun count-islands (n m matr)
    (setf res 0)
    (dotimes (i n res)
        (dotimes (j m)
            (if (= (aref matr i j) 1)
                (progn (dfs i j n m matr) (incf res))
            )
        )
    )
)

(setf n 4)
(setf m 5)
(setf matr (make-array (list n m) :initial-contents
    '((1 1 0 1 0)
      (1 1 0 1 1)
      (0 1 1 0 1)
      (1 0 0 0 0))))
(print (count-islands n m matr))