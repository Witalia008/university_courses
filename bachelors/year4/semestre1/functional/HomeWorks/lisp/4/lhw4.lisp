(defparameter fldr "E:\\Cloud\\OneDrive\\My Computer\\Projects\\ProgInUniv\\4 Course\\functional_progr\\HomeWorks\\lhw4\\")
(defun get-path (fname) (concatenate 'string fldr fname))
;(make-package :xml)
;(unless (find-package :xml) (make-package :xml))
;(load (get-path "XMLisp.lisp"))
(setq *xmlisp-packages* :all)
(defclass MEDICINE (xml:xml-serializer)
    (
        (medicaments :accessor medicaments :initform nil :initarg :medicaments)
    )
)
(defclass MEDICAMENT (xml:xml-serializer)
    (
        (medname :accessor medname :initform "Unnamed" :initarg :medname :type string)
        (price :accessor price :initform 0 :initarg :price :type integer)
        (dosage :accessor dosage :initform 0 :initarg :dosage :type integer)
        (visual :accessor visual :initform nil :initarg :visual)
    )
)
(defclass VISUAL (xml:xml-serializer)
    (
        (colour :accessor colour :initform "" :initarg :colour :type string)
        (consistence :accessor consistence :initform "" :initarg :consistence :type string)
        (application :accessor application :initform "" :initarg :application :type string)
    )
)
(defclass MEDNAME (xml:xml-serializer) () )
(defclass PRICE (xml:xml-serializer) () )
(defclass DOSAGE (xml:xml-serializer) () )
(defclass COLOUR (xml:xml-serializer) () )
(defclass CONSISTENCE (xml:xml-serializer) () )
(defclass APPLICATION (xml:xml-serializer) () )
 
(defparameter root (xml:load-object (get-path "xml\\Medicine.xml")))
(defparameter meds (medicaments root))
(print (xml:content (medname (car meds))))

;(load "E:\\Cloud\\OneDrive\\My Computer\\Projects\\ProgInUniv\\4 Course\\functional_progr\\HomeWorks\\lhw4\\XMLisp.lisp")