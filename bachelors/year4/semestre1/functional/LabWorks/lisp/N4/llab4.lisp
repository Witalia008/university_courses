(defparameter lett #\l)
(defclass word ()    (
        (data :initarg :data :initform (error "Must supply data"))
        cntlett
    )
)
(defmethod initialize-instance :after ((w word) &key)
    (let ((dat (slot-value w 'data)))
        (setf (slot-value w 'cntlett) (count lett dat))
    )
)
(defmethod printw ((w word) &key)
    (print (slot-value w 'data))
    (print (slot-value w 'cntlett))
)
(defmethod compw ((a word) (b word) &key)
    (let (     (worda (slot-value a 'data))
            (wordb (slot-value b 'data))
            (cnta (slot-value a 'cntlett))
            (cntb (slot-value b 'cntlett))
        )
        (or
            (and (= cnta cntb) (string< worda wordb))
            (< cnta cntb)
        )
    )
)

(defparameter fname "E:\\Cloud\\OneDrive\\My Computer\\Projects\\ProgInUniv\\4 Course\\functional_progr\\LabWorks\\llab4\\input1.txt")
(setq content (file-string fname))
(setq lst (remove-if #'(lambda (x) (equal "" x)) (split-sequence-if-not 'alpha-char-p content)))
(setq lstw (map 'list (lambda (x) (make-instance 'word :data x)) (remove-duplicates lst :test #'equal)))
(setq slst (sort lstw 'compw))
(map nil 'printw slst)